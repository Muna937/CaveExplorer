#:kivy 1.11.1
#:import dp kivy.metrics.dp

<XPBar>:
    orientation: 'horizontal'
    size_hint_y: None
    height: dp(30)  # Adjust as needed
    ProgressBar:
        id: xp_progress_bar
        max: 1
        value: root.experience_ratio
        size_hint_y: None
        height: dp(10)
        pos_hint: {'center_y': 0.5}
        canvas.before:
            Color:
                rgba: 0, 0, 0, 1  # Black background
            Rectangle:
                size: self.size
                pos: self.pos
            Color:
                rgba: 0.314, 0, 0.314, 1 # Purple foreground
            Rectangle:
                size: (self.width * self.value, self.height)
                pos: self.pos

    Label:
        id: xp_label
        text: root.exp_text
        font_size: dp(14)
        size_hint_y: None
        height: dp(20)
        pos_hint: {'center_y': 0.5}

<StatBar>:
    orientation: 'vertical'
    size_hint_y: None
    height: dp(40)
    ProgressBar:
        id: stat_progress_bar
        max: 1
        value: root.ratio
        size_hint: (1, None)
        height: dp(20)
        canvas.before:
            Color:
                rgba: 1, 0, 0, 1 # Red background
            Rectangle:
                pos: self.pos
                size: self.size
            Color:
                rgba: root.bar_color  # Use the property for the bar color
            Rectangle:
                pos: self.pos
                size: (self.width * self.value , self.height)

    Label:
        id: stat_label
        text: root.label_text
        font_size: dp(14)
        size_hint: (1, None)
        height: dp(15)


<StatDisplay>:
    orientation: 'vertical'
    size_hint: (None, None)
    width: dp(200)
    height: dp(80)
    spacing: dp(2)

    Label:
        id: attack_label
        text: root.attack_range_text
        font_size: dp(18)
    Label:
        id: defense_label
        text: root.defense_text
        font_size: dp(18)
    Label:
        id: dodge_label
        text: root.dodge_text
        font_size: dp(18)
    Label:
        id: coin_label
        text: root.coin_text
        font_size: dp(18)

<BuffList>:
    orientation: 'vertical'
    size_hint: (None, None)
    width: dp(200)
    height: dp(100)
    pos_hint: {'x': dp(490)/800, 'top': 0.8}
    canvas.before:
        Color:
            rgba: 0.588, 0.588, 0.588, 1  # Buff box background color
        Rectangle:
            pos: self.pos
            size: self.size
        Color:
            rgba: 0.392, 0.392, 0.392, 1  # Gray border
        Line:  # Use Line for the border
            rectangle: (*self.pos, *self.size)
            width: dp(1)  # Set border width
    Label:
        id: buff_title
        text: "Active Buffs:"
        font_size: dp(18)
        color: 0, 0, 0, 1  # Black title
        size_hint_y: None
        height: dp(25)

    # Buffs will be added dynamically in Python code

<ButtonGrid>:
    cols: 2
    rows: 2
    size_hint: (None, None)
    size: (dp(210), dp(70))  # Adjusted for spacing
    pos_hint: {'right': 1, 'y': 0}
    spacing: dp(5)

    Button:
        id: button1
        text: root.button_texts[0] if root.button_texts else ""
        font_size: dp(16)
    Button:
        id: button2
        text: root.button_texts[1] if root.button_texts else ""
        font_size: dp(16)
    Button:
        id: button3
        text: root.button_texts[2] if root.button_texts else ""
        font_size: dp(16)
    Button:
        id: button4
        text: root.button_texts[3] if root.button_texts else ""
        font_size: dp(16)

<StatusScreen>:
    orientation: 'vertical'  # Overall vertical layout
    padding: dp(10)
    spacing: dp(5)
    canvas.before:
        Color:
            rgba: 0.392, 0.392, 0.392, 1  # Gray background
        Rectangle:
            pos: 0, 0
            size: 800, 100 #Assuming 800 x 600

    XPBar:
        id: xp_bar
        experience_ratio: root.player.experience / root.player.max_experience if root.player and root.player.max_experience > 0 else 0
        exp_text: f"XP: {root.player.experience}/{root.player.max_experience}" if root.player else ""

    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: dp(30)
        spacing: dp(10)
        Label:
            id: name_label
            text: f"Name: {root.player.name}" if root.player else ""
            font_size: dp(20)
        Label:
            id: class_label
            text: f"Class: {root.player.class_name}" if root.player else ""
            font_size: dp(20)
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: dp(60)
        spacing: dp (40)
        StatBar:
            id: health_bar
            ratio: root.player.current_health / root.player.stats['health'] if root.player and root.player.stats['health'] >0 else 0
            label_text: f"HP: {root.player.current_health}/{root.player.stats['health']}" if root.player else ""
            bar_color: 0, 1, 0, 1  # Green

        StatBar:
            id: mana_bar
            ratio: root.player.current_mana / root.player.stats['mana'] if root.player and root.player.stats['mana'] > 0 else 0
            label_text: f"MP: {root.player.current_mana}/{root.player.stats['mana']}" if root.player else ""
            bar_color: 0, 0, 1, 1  # Blue
        StatDisplay:
            id: stat_display
            attack_range_text: f"Attack: {root.player.stats['attack'][0]}-{root.player.stats['attack'][1]}" if root.player else ""
            defense_text: f"Defense: {root.player.get_defense()}" if root.player else ""
            dodge_text: f"Dodge: {root.player.get_evasion()}%" if root.player else ""
            coin_text: f"Coins: {root.player.coins}" if root.player else ""

    BuffList:
        id: buff_list
        buffs: root.player.buffs if root.player else []
        #We add the dynamic labels in python code.

    BoxLayout:  # Layout for the Equipment button + ButtonGrid
        orientation: 'horizontal'
        size_hint: (None, None)
        width: dp(320)  # Adjust as needed for your layout.  3 buttons + spacing
        height: dp(70)
        pos_hint: {'right': 1, 'y': 0}
        spacing: dp(5)
        Button:
            id: equip_button
            text: "Equip"
            font_size: dp(16)
            size_hint: (None, None)
            size: (dp(100), dp(60))

        ButtonGrid:
            id: button_grid
            button_texts: root.BUTTON_TEXTS.get(root.current_state, [""] * 4)
            current_state: root.current_state